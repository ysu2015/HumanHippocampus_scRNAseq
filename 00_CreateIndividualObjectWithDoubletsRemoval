library(Seurat)
library(stringr)
setwd("./")
# dir()
sample.data <- read.table("counts.deg.txt.gz",header=T,row.name=1)
ncol(sample.data)

# separate the pA and random parts ##
round1<-read.csv("/Round1.csv")
round2<-read.csv("/Round2.csv")
round3<-read.csv("/Round3.csv")

round1_assign<-read.csv("/Round1_assign.csv")

### get rid of the unexpected barcodes ###
wt<-sample.data;# nrow(wt)
wt.r1<-wt[,str_sub(colnames(wt),17,24) %in% round1[,2]];# ncol(wt.r1)
wt.r1r2<-wt.r1[,str_sub(colnames(wt.r1),9,16) %in% round2[,2]];# ncol(wt.r1r2)
wt.r1r2r3<-wt.r1r2[,str_sub(colnames(wt.r1r2),1,8) %in% round3[,2]];ncol(wt.r1r2r3)

#####
sample.data<-wt.r1r2r3
pA.sample.data<-sample.data[,str_sub(colnames(sample.data),17,24) %in% round1_assign[,"Round1_1"]]; 
print(ncol(pA.sample.data))
random.sample.data<-sample.data[,str_sub(colnames(sample.data),17,24) %in% round1_assign[,"Round1_2"]]; 
print(ncol(random.sample.data)); random<-random.sample.data

## randomX primer ##
old_cell_barcode<-colnames(random.sample.data)
revised_cell_barcode<-NULL
for (i in 1: length(old_cell_barcode))
{ revised_cell_barcode[i]<-old_cell_barcode[i]
  for ( j in 1: nrow(round1_assign))
  { 
   if (str_sub(old_cell_barcode[i],17,24)==round1_assign[j,"Round1_2"]) 
  {
  revised_cell_barcode[i] <- paste0(str_sub(old_cell_barcode[i],1,16),round1_assign[j,"Round1_1"],sep="")
  }
  }
}
colnames(random.sample.data)<-revised_cell_barcode 
  
## identify the cells with shared cell barcodes
dat<-cbind(pA.sample.data,random.sample.data)
ncol(dat)
dat2<-t(rowsum(t(dat), group = colnames(dat), na.rm = T))
ncol(dat2)

################################################
## create individual objects ###
wt.count <-dat2
wt<-CreateSeuratObject(counts = wt.count, project ="SPLIT",min.cells = 10, min.features=200)
wt[["percent.mt"]] <- PercentageFeatureSet(wt, pattern = "^MT-")
wt[["Region"]]<-"HIPP"
wt<-subset(wt,subset= nFeature_RNA >200 & percent.mt<5 & nFeature_RNA < 8000)
head(wt[[]])
print(nrow(wt[[]]))
print(mean(wt@meta.data$nFeature_RNA))
print(mean(wt@meta.data$nCount_RNA))
print("/n######################################/n")

## do Doublets Removal with individual sample ##
## https://bioconductor.org/packages/devel/bioc/vignettes/scDblFinder/inst/doc/scDblFinder.html#installation
library(scDblFinder)
sce <- scDblFinder(wt@assays$RNA@counts)
table(sce$scDblFinder.class)

df<-wt[[]]
df["Individual.scDblFinder.class"]<-sce$scDblFinder.class
df["Individual.scDblFinder.score"]<-sce$scDblFinder.score
wt@meta.data<-df
head(wt[[]])
saveRDS(wt, "S1_gene200To8K_MT5_scDblFinder.rds")

####################
# merge all the objects together as "all" and keep only singlet for further analysis.

single.wt<-subset(all,Individual.scDblFinder.class=="singlet")
saveRDS(single.wt,"single.All_info_gene200To8K_MT5_scDblFinder.rds")
